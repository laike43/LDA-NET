from nltk.tokenize import RegexpTokenizer
from stop_words import get_stop_words
from nltk.stem.porter import PorterStemmer
from gensim import corpora,models
from sqlconnect import Sqldata
from fileop import Fileop
import datetime
import gensim
import logging

#logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
start = datetime.datetime.now()
tokenizer =RegexpTokenizer(r'\w+')
stop_words = get_stop_words('en')
stemmer = PorterStemmer()

count = Sqldata().data_num()[0][0]

for i in range(0,count):
    starttime = datetime.datetime.now()
    print("正在处理第%s条数据" % i)
    mail_list = Sqldata().sql_conn(i)
    body = mail_list[0][0][0]
    sender = mail_list[1][0][0]
    # 全部小写
    body1=body.lower()
    # 用句号作为分割符，可加入逗号改进
    body2=body1.split('.')
    body1=[]
    '''
    for i in body:
        body1.append(i.split(','))
    '''
    texts=[]
    for body in body2:
        #  分词
        token = tokenizer.tokenize(body)

        # 去除停用词
        stop_tokens=[]
        for j in token:
            if not j in stop_words:
                stop_tokens.append(j)
        #  提炼词干
        stemmed=[]
        for j in stop_tokens:
            stemmed.append(stemmer.stem(j))
        #  将文件合成二维矩阵
        texts.append(stemmed)
    # 词频统计
    dictionary = corpora.Dictionary(texts)
    corpus = []
    for j in texts:
        corpus.append(dictionary.doc2bow(j))


    # 调整语料中不同词的词频，将那些在所有文档中都出现的高频词的词频降低
    tfidf = models.TfidfModel(corpus)
    corpusTfidf = tfidf[corpus]
    #未使用多核心，可改
    try:
 #       ldamodel=gensim.models.LdaMulticore(corpusTfidf,num_topics=1,id2word = dictionary,passes=20)
        ldamodel=gensim.models.LdaModel(corpusTfidf,num_topics=1,id2word = dictionary)
        print("正在处理原始数据......")
        print(ldamodel.print_topics(num_topics=1, num_words=3))
    except:
        pass

#  结果处理
    topic = ldamodel.show_topics(num_topics=1,num_words=3)
    data=topic[0][1]
    dat = data.split('+')
    str=''
    for i in  dat:
        s = (i.split('*'))[1]
        Fileop().file_check(sender,s)
    print("写入数据到 %s 中....." % sender)
    endtime=datetime.datetime.now()
    print((endtime-start).seconds)

end = datetime.datetime.now()
print('共用时间：',(end-start).seconds,'s')
